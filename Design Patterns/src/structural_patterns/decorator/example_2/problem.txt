We’re going to build a code editor like IntelliJ or VSCode.
When we open a project, we should see all the artefacts (items) in that project.

Every artefact should have an icon and the icon can be different from one artefact to another.
For example, the Main file’s icon has a special green play marker on top of the icon.
Main

Similarly, if an artefact includes errors, its icon should include an error marker:
Editor

Run the code in the Demo class.
We’re simulating the rendering of these icons using simple strings.
Next, look at the current implementation of these concepts in the decoratorpackage.
Read my comments in the Artefact class about the problems with this implementation.
Refactor the solution using the decorator pattern.

public class Artefact {
    private String name;
    private boolean hasError;
    private boolean isMain;

    public Artefact(String name) {
        this.name = name;
    }

    public String render() {
        // The current implementation is not easily extensible. If tomorrow we need
        // to support other special markers, we have to come back and modify this class.
        //
        // For example, if the project is under source control, we need to highlight
        // the artefacts that are changed but not committed to the repository with a
        // special marker.
        //
        // Similarly, if an artefact is excluded from the project, we may want to
        // make the icon look disabled or semi-transparent.
        //
        // Every time we need to support a new marker, we have to come back and modify
        // this class. Over time, the code in this class gets more and more convoluted
        // with several if statements and additional fields.

        String errorIcon = hasError ? "[Error]" : "";
        String mainIcon = isMain ? "[Main]" : "";

        return String.format("%s %s %s", name, errorIcon, mainIcon);
    }

    public void setHasError(boolean hasError) {
        this.hasError = hasError;
    }

    public void setMain(boolean main) {
        isMain = main;
    }
}

public class Editor {
    public void openProject(String path) {
        Artefact[] artefacts = {
                new Artefact("Main"),
                new Artefact("Demo"),
                new Artefact("EmailClient"),
                new Artefact("EmailProvider"),
        };

        artefacts[0].setMain(true);
        artefacts[2].setHasError(true);

        for (var artefact : artefacts)
            System.out.println(artefact.render());
    }
}

public class Demo {
    public static void show() {
        var editor = new Editor();
        editor.openProject("...");
    }
}